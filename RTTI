RTTI: Runtime Type Identification
RTTI有两种：
1.“传统”的RTTI，它假定我们在编译时就知道了所有的类型；
2.反射机制，它允许我们在运行时发现和使用类的信息。

类型信息在运行时如何表示？
答案是Class对象（Class object），它包含了与类有关的信息。事实上，Class object就是用来创建类的所有“常规”对象的。
每个Class都有一个Class object，每当编译了一个新的类，就会有一个Class object被保存在Class同名的.class文件中。

谁生成这个类的对象？（毕竟这是Class的Class object，肯定不会用一个Class来new Class）
答案是类加载器（Class Loader）。JVM使用一种称为Class Loaderd的子系统来生成这个Class object。

Class Loader系统包含一条类加载链，最顶端的是原生加载器（Native Class Loader），它是JVM实现的一部分。
JVM提供的Class Loader是系统Class Loader，开发者也可以通过继承ClassLoader类来创建自己的Class Loader。
原生类加载器加载的是所谓的可信类，它们通常是从本地盘加载的。
Class Loader加载类要从.class文件加载，这些二进制数据有以下来源：
1.从本地文件加载.class文件
2.从JAR包中加载直接加载
3.通过网络获得数据来源
4.动态编译，运行时执行加载


很多类都是在对其第一次使用时，动态加载到JVM中的。什么是“第一次使用”？——当程序第一次访问类的static field时（包括构造器）。
也因此，类并不是在运行之前就完全被加载，而是在必要时动态加载的。（但是在运行之前肯定都被编译了。）

Class Loader如何加载一个类的Class object？
1.Class Loader首先检查这个class的Class object是否已经被加载了。
2.若尚未加载，默认的加载器就会根据类名查找其.class文件（这个时候若找不到会throw ClassNotFoundException）。
在这个类的字节码被加载时，它们会接受验证，以确保其没有被破坏，并且不包含不良Java代码。
3.一旦某个类的Class object被加载进内存，它就被用来创建这个类的所有对象。

Class的static method: Class.forName()介绍
Class.forName()有三个重载，这里说的是forName(String classname)，这个method返回Class object的引用。它还有个副作用：如果这个类未加载，则加载这个类。
这里不需要拥有这个Class的对象就可以通过forName method得到这个Class的Class object。这里也可以得到interface的Class object的引用。
注意这里的classname是class的全限定名，即要包括包（packet）的名字。

还有一种是通过一个Class的object来得到这个Class的Class object: .getClass()
此方法属于Object。

String getName(): 返回一个Class object的class或interface或array class或primitive type或void的全限定“类”名
如果这个class是class或interface，则返回其全限定名，如java.lang.String
如果这个class是primitive type或void，则返回名字，如byte，void
如果这个class是class of array，则内部包含element的全限定名，外部加个[，符号如下：
Element Type	Encoding
boolean      	Z
byte	        B
char	        C
class or interface	Lclassname
double	      D
float       	F
int	          I
long	        J
short       	S
如：Object[3]的全限定名：[Ljava.lang.Object
而int[3][4][5][6][7][8][9]的全限定名：[[[[[[[I

String getSimpleName()
String getCanonicalName()
classObject.newInstance()被不建议使用，现在建议为：classObject.getDeclaredConstructor().newInstance()

类字面常量（Class Literal）
Java提供了另一种方法来生成对Class object的引用——使用Class Literal。
这个做法相比于前者更简单，更安全，更高效。
比如对于一个objec，其Class object为：Object.class。
这里有一点与forName() method不同的是，使用Class Literal创建Class object的引用不会自动的初始化该Class object对象。

这里我们看为了第一次使用一个类（class）而做的准备：
1.加载（load），这是由类加载器（class loader）执行的。查找字节码，并从中创建Class object。
2.链接（link），验证类中的字节码，为static field分配存储空间，若必须的话，解析这个类创建的对其他类的所有引用。
3.初始化（initialize）：如发现一个class未load和link，先load和link这个类；
                       若该类具有super class，则递归初始化（注意要是有class未load和link的话要先load和link）；
                       初始化static field的语句（若有的话），执行static初始化器和static初始化块。

这里我们看链接（Link）阶段，Link阶段负责把类的二进制数据合并到JRE中：
1.验证：验证被加载的类是否有正确的内部结构，并和其它类协调一致
2.准备：负责为类的static field分配内存，并设置默认初始值
3.解析：将类的二进制数据中的符号引用替换成直接引用

泛型（Generics）
Class支持泛型，如：Class<Integer> intClass = int.class;而且最好像Collection类一样，无时无刻都要带上泛型！
与Collection类一样，这里有个注意：Class<Number> intClass = int.class;这条语句是错的。
因为尽管Integer是Number的子类，但是Integer Class不是Number Class的子类！
应该这样：Class<? extends Number> intClass = int.class;

RTTI小结
迄今为止，我们已知的RTTI有：
1.最传统的类型转换，如：
Number n = new Integer(1);
(Integer) n;
若出错，则throw ClassCastException.
2.Class object，通过查询Class object可知运行时所需的信息。
3.instance of，常见用法为：
if(x instanceof ArrayList)
  ((ArrayList) x).add(i);

boolean isInstance(Object obj)是instanceof的运行时的动态等价方法。
